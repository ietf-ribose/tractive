#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative "./command_base"
require_relative "./generate"

class TractiveCommand < CommandBase
  default_command :migrate_tickets

  desc "generate", "Generate different files/scripts"
  subcommand "generate", Generate

  desc "<OPTIONS>", "Migrate Trac instances to modern Git management platforms like GitHub and GitLab"
  method_option "attachmentexporter", type: :string, aliases: ["-A", "--attachment-exporter"],
                                      desc: "Generate an attachment exporter script according to config.yaml"
  method_option "attachurl", type: :string, aliases: ["-a", "--attachment-url"], banner: "<URL>",
                             desc: "If attachment files are reachable via a URL we reference this here"
  method_option "dryrun", type: :boolean, aliases: ["-d", "--dry-run"],
                          desc: "Write data to a file instead of pushing it to github"
  method_option "exportattachments", type: :string, aliases: ["-e", "--export-attachments"],
                                     desc: "Export attachments from the database according to config.yaml"
  method_option "fast", type: :boolean, aliases: ["-F", "--fast-import"],
                        desc: "Import without safety-checking issue numbers."

  method_option "filter", type: :boolean, aliases: ["-f", "--filter"],
                          desc: "Filter records that you want to import."
  method_option "columnname", type: :string, aliases: ["--column-name"],
                              desc: "Name of the column to filter."
  method_option "operator", type: :string, aliases: ["--operator"],
                            desc: "Operator for filter."
  method_option "columnvalue", type: :string, aliases: ["--column-value"],
                               desc: "Value of the column to filter."
  method_option "includenull", type: :boolean, aliases: ["--include-null"],
                               desc: "Flag for including null values in the filter result."

  method_option "importfromfile", type: :string, aliases: ["-I", "--import-from-file"],
                                  desc: "Import issues from a json file"
  method_option "info", type: :boolean, aliases: ["-i", "--info"],
                        desc: "Reports existing labels and users in the database"
  method_option "mockdeleted", type: :boolean, aliases: ["-M", "--mockup"],
                               desc: "Import from 0 and mocking tickets deleted on trac"
  method_option "openedonly", type: :boolean, aliases: ["-o", "--opened-only"],
                              desc: "Skips the import of closed tickets"
  method_option "revmapfile", type: :string, aliases: ["-r", "--rev-map-file"], banner: "<PATH>",
                              desc: "Allows to specify a commit revision mapping FILE"
  method_option "singlepost", type: :boolean, aliases: ["-S", "--single-post"],
                              desc: "Put all issue comments in the first message."
  method_option "start", type: :numeric, aliases: ["-s", "--start-at"], banner: "<ID>",
                         desc: "Start migration from ticket with number <ID>"
  def migrate_tickets
    Tractive::Main.new(options).run
  end

  desc "migrate-wikis", "Migrate Trac wikis to a git repository, preserving history (including authors, dates, and comments)"
  method_option "attachment-base-url", type: :string, aliases: ["-a"], banner: "http://<base-url>",
                                       desc: "If attachment files are reachable via a URL we reference this here"
  method_option "export-file-path", type: :string, aliases: ["-e"], banner: "/PATH/TO/EXPORTFILE",
                                    desc: "Full path of the Trac sqlite3 database export file"
  method_option "repo-path", type: :string, aliases: ["-r"], banner: "/GIT/ROOT/DIR",
                             desc: "Full path to the root of the git-repository that is our destination"
  method_option "author-map", type: :string, aliases: ["-A"], banner: "/PATH/TO/AUTHORMAP",
                              desc: "Full path to the trac-author -> git-author file to be used to match Trac contribnutors to their git equivalents"
  method_option "default-comment", type: :string, aliases: ["-C"], banner: "COMMENT", default: "Initial load from Trac",
                                   desc: "Specify the git-commit message to use if a given Trac wiki version has no comment"
  def migrate_wikis
    Tractive::Main.new(options).migrate_wikis
  end

  def self.exit_on_failure?
    true
  end

  def method_missing(*args)
    warn "No method found named: #{args[0]}"
    warn "Run with `--help` or `-h` to see available options"
    exit 1
  end

  def respond_to_missing?
    true
  end
end

TractiveCommand.start(ARGV)
