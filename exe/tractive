#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative "../lib/tractive"

class TractiveCommand < Thor
  default_command :default
  class_option "attachmentexporter", type: :string, aliases: ["-A", "--attachment-exporter"],
                                     desc: "Generate an attachment exporter script according to config.yaml"
  class_option "attachurl", type: :string, aliases: ["-a", "--attachment-url"], banner: "<URL>",
                            desc: "If attachment files are reachable via a URL we reference this here"
  class_option "config", type: :string, default: "tractive.config.yaml", banner: "<PATH>", aliases: "-c",
                         desc: "Set the configuration file"
  class_option "dryrun", type: :boolean, aliases: ["-d", "--dry-run"],
                         desc: "Write data to a file instead of pushing it to github"
  class_option "exportattachments", type: :string, aliases: ["-e", "--export-attachments"],
                                    desc: "Export attachments from the database according to config.yaml"
  class_option "fast", type: :boolean, aliases: ["-F", "--fast-import"],
                       desc: "Import without safety-checking issue numbers."
  class_option "filter", type: :boolean, aliases: ["-f", "--filter"],
                         desc: "Filter records that you want to import."
  class_option "columnname", type: :string, aliases: ["--column-name"],
                             desc: "Name of the column to filter."
  class_option "operator", type: :string, aliases: ["--operator"],
                           desc: "Operator for filter."
  class_option "columnvalue", type: :string, aliases: ["--column-value"],
                              desc: "Value of the column to filter."
  class_option "importfromfile", type: :string, aliases: ["-I", "--import-from-file"],
                                 desc: "Import issues from a json file"
  class_option "info", type: :boolean, aliases: ["-i", "--info"],
                       desc: "Reports existing labels and users in the database"
  class_option "mockdeleted", type: :boolean, aliases: ["-M", "--mockup"],
                              desc: "Import from 0 and mocking tickets deleted on trac"
  class_option "openedonly", type: :boolean, aliases: ["-o", "--opened-only"],
                             desc: "Skips the import of closed tickets"
  class_option "revmapfile", type: :string, aliases: ["-r", "--rev-map-file"], banner: "<PATH>",
                             desc: "Allows to specify a commit revision mapping FILE"
  class_option "singlepost", type: :boolean, aliases: ["-S", "--single-post"],
                             desc: "Put all issue comments in the first message."
  class_option "start", type: :numeric, aliases: ["-s", "--start-at"], banner: "<ID>",
                        desc: "Start migration from ticket with number <ID>"
  class_option "verbose", type: :boolean, aliases: ["-v", "--verbose"], desc: "Verbose mode"

  def self.exit_on_failure?
    true
  end

  desc "<OPTIONS>", "Migrate Trac instances to modern Git management platforms like GitHub and GitLab"
  def default
    verify_config_options!
    verify_filter_options!
    Tractive::Main.new(options).run
  end

  def method_missing(*args)
    warn_and_exit("No method found named: #{args[0]}", 1)
  end

  def respond_to_missing?
    true
  end

  no_commands do
    def verify_config_options!
      return if File.exist?(options[:config])

      warn_and_exit("missing configuration file (#{options[:config]})", 1)
    end

    def verify_filter_options!
      required_options = { "columnname" => "--column-name",
                           "operator" => "--operator",
                           "columnvalue" => "--column-value" }
      missing_options = {}
      required_options.each do |key, value|
        missing_options[key] = value if !options[key] || options[key].strip.empty?
      end

      return if !options[:filter] || missing_options.empty?

      warn_and_exit("missing filter options #{missing_options.values}", 1)
    end

    def warn_and_exit(message, exit_code)
      warn message
      warn "Run with `--help` or `-h` to see available options"
      exit exit_code
    end
  end
end

TractiveCommand.start(ARGV)
